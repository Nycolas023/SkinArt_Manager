--USE master;
--GO
------------------------------------------------------------------------
--IF EXISTS (SELECT name FROM sys.databases WHERE name = 'SKINART')
--BEGIN
   -- ALTER DATABASE SKINART SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
   -- DROP DATABASE SKINART;
--END
--GO

--CREATE DATABASE SKINART;
--GO
------------------------------------------------------------------------
USE SKINART;
GO

-------------------------------------------------------------------------------
-- CRIAÇÃO DAS TABELAS
-------------------------------------------------------------------------------

CREATE TABLE USUARIO (
    ID_USUARIO INT PRIMARY KEY IDENTITY(1,1),
    NOME_USUARIO VARCHAR(200) NOT NULL,
    SOBRENOME_USUARIO VARCHAR(200) NOT NULL,
    DATA_NASC_USUARIO DATE NOT NULL,
    CPF_USUARIO VARCHAR(14) UNIQUE NOT NULL,
    RG_USUARIO VARCHAR(15) NOT NULL,
    LOGIN_USUARIO VARCHAR(200) UNIQUE NOT NULL,
    SENHA_USUARIO VARCHAR(200) NOT NULL,
    STATUS_USUARIO VARCHAR(40) NOT NULL DEFAULT 'INATIVO',
    ULTIMO_LOGIN DATE
);
GO

CREATE TABLE PAPEL (
    ID_PAPEL INT PRIMARY KEY IDENTITY(1,1),
    NOME_PAPEL VARCHAR(50) NOT NULL
);
GO

CREATE TABLE USUARIO_PAPEL (
    ID_USUARIO INT NOT NULL,
    ID_PAPEL INT NOT NULL,
    PRIMARY KEY (ID_USUARIO, ID_PAPEL),
    FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO),
    FOREIGN KEY (ID_PAPEL) REFERENCES PAPEL(ID_PAPEL)
);
GO

CREATE TABLE TATUADOR (
    ID_USUARIO INT PRIMARY KEY,
    DESCRICAO_TATUADOR VARCHAR(500) NOT NULL,
    CNAE_FORMACAO_TATUADOR VARCHAR(100) NOT NULL,
    FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO)
);
GO

CREATE TABLE ARTE_TATUADOR (
    ID_ARTE_TATUADOR INT PRIMARY KEY IDENTITY(1,1),
    ID_TATUADOR INT NOT NULL,
    IMAGEM_PATH_ARTE_TATUADOR VARCHAR(300) NOT NULL,
    DESC_ARTE_TATUADOR VARCHAR(200),
    FOREIGN KEY (ID_TATUADOR) REFERENCES TATUADOR(ID_USUARIO)
);
GO

CREATE TABLE EstoqueItem (
    ID_EstoqueItem INT PRIMARY KEY IDENTITY(1,1),
    Categoria VARCHAR(100) NOT NULL,
    NomeItem VARCHAR(255) NOT NULL,
    Quantidade INT NOT NULL,
    Unidade VARCHAR(50) NOT NULL,
    UsoPorSessao DECIMAL(10, 2) NULL,
    EstoqueMinimo INT NOT NULL,
    DataCriacao DATETIME DEFAULT GETDATE(),
    DataAtualizacao DATETIME DEFAULT GETDATE()
);
GO

CREATE INDEX IX_EstoqueItem_CategoriaNome ON EstoqueItem (Categoria, NomeItem);
GO

CREATE TABLE Cliente (
    ID_CLIENTE INT PRIMARY KEY IDENTITY(1,1),
    NOME_COMPLETO VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    TELEFONE VARCHAR(20) NOT NULL,
    DATA_NASCIMENTO DATE NULL,
    OBSERVACOES NVARCHAR(MAX) NULL,
    DATA_CRIACAO DATETIME DEFAULT GETDATE(),
    DATA_ATUALIZACAO DATETIME DEFAULT GETDATE()
);
GO

CREATE INDEX IX_Cliente_NomeEmail ON Cliente (NOME_COMPLETO, EMAIL);
GO

CREATE TABLE StatusAgendamento (
    ID_STATUS_AGENDAMENTO INT PRIMARY KEY IDENTITY(1,1),
    NOME_STATUS VARCHAR(50) NOT NULL UNIQUE
);
GO

CREATE TABLE Agendamento (
    ID_AGENDAMENTO INT PRIMARY KEY IDENTITY(1,1),
    ID_CLIENTE INT NOT NULL,
    ID_TATUADOR INT NOT NULL,
    DATA_HORA_INICIO DATETIME NOT NULL,
    DATA_HORA_FIM DATETIME NOT NULL,
    ID_STATUS_AGENDAMENTO INT NOT NULL,
    TIPO_TATUAGEM VARCHAR(255) NOT NULL,
    VALOR DECIMAL(10, 2) NOT NULL,
    OBSERVACOES NVARCHAR(MAX) NULL,
    DATA_CRIACAO DATETIME DEFAULT GETDATE(),
    DATA_ATUALIZACAO DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (ID_CLIENTE) REFERENCES Cliente(ID_CLIENTE),
    FOREIGN KEY (ID_TATUADOR) REFERENCES Tatuador(ID_USUARIO),
    FOREIGN KEY (ID_STATUS_AGENDAMENTO) REFERENCES StatusAgendamento(ID_STATUS_AGENDAMENTO)
);
GO

CREATE INDEX IX_Agendamento_TatuadorData ON Agendamento (ID_TATUADOR, DATA_HORA_INICIO);
CREATE INDEX IX_Agendamento_ClienteData ON Agendamento (ID_CLIENTE, DATA_HORA_INICIO);
CREATE INDEX IX_Agendamento_Status ON Agendamento (ID_STATUS_AGENDAMENTO);
GO

CREATE TABLE STATUS_PAGAMENTO (
    ID_STATUS_PAGAMENTO INT PRIMARY KEY IDENTITY(1,1),
    STATUS_PAGAMENTO VARCHAR(20) NOT NULL
);
GO

CREATE TABLE PAGAMENTO (
    ID_PAGAMENTO INT PRIMARY KEY IDENTITY(1,1),
    TIPO_PAGAMENTO VARCHAR(30) NOT NULL,
    DATA_PAGAMENTO DATE NOT NULL,
    HORA_PAGAMENTO TIME NOT NULL,
    PARCELAMENTO_PAGAMENTO TINYINT,
    ID_STATUS_PAGAMENTO INT NOT NULL,
    ID_TATUADOR INT NOT NULL,
    FOREIGN KEY (ID_STATUS_PAGAMENTO) REFERENCES STATUS_PAGAMENTO(ID_STATUS_PAGAMENTO),
    FOREIGN KEY (ID_TATUADOR) REFERENCES TATUADOR(ID_USUARIO)
);
GO

CREATE TABLE OrdemServico (
    ID_ORDEM_SERVICO INT PRIMARY KEY IDENTITY(1,1),
    ID_CLIENTE INT NOT NULL,
    ID_TATUADOR INT NOT NULL,
    DESCRICAO_SERVICO VARCHAR(300) NOT NULL,
    VALOR DECIMAL(10, 2) NOT NULL,
    STATUS_SERVICO VARCHAR(50) NOT NULL,
    DATA_CRIACAO DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (ID_CLIENTE) REFERENCES Cliente(ID_CLIENTE),
    FOREIGN KEY (ID_TATUADOR) REFERENCES Tatuador(ID_USUARIO)
);
GO

CREATE TABLE TransacaoFinanceira (
    ID_TRANSACAO INT PRIMARY KEY IDENTITY(1,1),
    DATA_TRANSACAO DATE NOT NULL,
    DESCRICAO VARCHAR(300) NOT NULL,
    VALOR DECIMAL(10,2) NOT NULL,
    TIPO_TRANSACAO VARCHAR(10) NOT NULL CHECK (TIPO_TRANSACAO IN ('Receita', 'Despesa')),
    ORIGEM_REFERENCIA VARCHAR(100) NULL
);
GO

-------------------------------------------------------------------------------
-- INSERINDO PAPÉIS E STATUS
-------------------------------------------------------------------------------
INSERT INTO PAPEL (NOME_PAPEL) VALUES ('Tatuador'), ('Admin');
GO

INSERT INTO STATUS_PAGAMENTO (STATUS_PAGAMENTO) VALUES ('Pendente'), ('Pago');
GO

INSERT INTO StatusAgendamento (NOME_STATUS) VALUES ('Pendente'), ('Confirmado'), ('Cancelado');
GO

-------------------------------------------------------------------------------
-- USUÁRIOS E TATUADORES
-------------------------------------------------------------------------------
-- ADMIN: Administrador do sistema (apenas Admin)
INSERT INTO USUARIO (
    NOME_USUARIO, SOBRENOME_USUARIO, DATA_NASC_USUARIO, CPF_USUARIO, RG_USUARIO,
    LOGIN_USUARIO, SENHA_USUARIO, STATUS_USUARIO, ULTIMO_LOGIN
) VALUES (
    'Administrador', 'Sistema', '1980-01-01', '000.000.000-00', '00.000.000-0',
    'admin01', 'admin123', 'ATIVO', GETDATE()
);
DECLARE @AdminId INT = SCOPE_IDENTITY();

INSERT INTO USUARIO_PAPEL (ID_USUARIO, ID_PAPEL)
VALUES (@AdminId, (SELECT ID_PAPEL FROM PAPEL WHERE NOME_PAPEL = 'Admin'));
GO

-- TATUADOR: Tatuador Principal
INSERT INTO USUARIO (
    NOME_USUARIO, SOBRENOME_USUARIO, DATA_NASC_USUARIO,
    CPF_USUARIO, RG_USUARIO, LOGIN_USUARIO, SENHA_USUARIO,
    STATUS_USUARIO, ULTIMO_LOGIN
) VALUES (
    'Tatuador', 'Principal', '1990-01-01',
    '111.111.111-11', '11.111.111-1',
    'tatuador01', 'tatuador123',
    'ATIVO', GETDATE()
);
DECLARE @TatuadorId INT = SCOPE_IDENTITY();

INSERT INTO USUARIO_PAPEL (ID_USUARIO, ID_PAPEL)
VALUES (@TatuadorId, (SELECT ID_PAPEL FROM PAPEL WHERE NOME_PAPEL = 'Tatuador'));

INSERT INTO TATUADOR (ID_USUARIO, DESCRICAO_TATUADOR, CNAE_FORMACAO_TATUADOR)
VALUES (@TatuadorId, 'Tatuador principal do estúdio', '9602501');

-- TATUADOR: Maria 
INSERT INTO USUARIO (
    NOME_USUARIO, SOBRENOME_USUARIO, DATA_NASC_USUARIO,
    CPF_USUARIO, RG_USUARIO, LOGIN_USUARIO, SENHA_USUARIO,
    STATUS_USUARIO, ULTIMO_LOGIN
) VALUES (
    'Maria', 'Tatuador', '1985-08-22',
    '111.222.333-44', '12.324.543-9',
    'maria.silva', 'senha123',
    'ATIVO', GETDATE()
);
DECLARE @MariaTatuadorId INT = SCOPE_IDENTITY();

INSERT INTO USUARIO_PAPEL (ID_USUARIO, ID_PAPEL)
VALUES (@MariaTatuadorId, (SELECT ID_PAPEL FROM PAPEL WHERE NOME_PAPEL = 'Tatuador'));

INSERT INTO TATUADOR (ID_USUARIO, DESCRICAO_TATUADOR, CNAE_FORMACAO_TATUADOR)
VALUES (@MariaTatuadorId, 'Especialista em realismo preto e cinza.', '9602501');

-- TATUADOR: Ana Santos
INSERT INTO USUARIO (
    NOME_USUARIO, SOBRENOME_USUARIO, DATA_NASC_USUARIO,
    CPF_USUARIO, RG_USUARIO, LOGIN_USUARIO, SENHA_USUARIO,
    STATUS_USUARIO, ULTIMO_LOGIN
) VALUES (
    'Ana', 'Santos', '1990-02-10',
    '222.333.444-55', '22.333.444-5',
    'ana.santos', 'senha123',
    'ATIVO', GETDATE()
);
DECLARE @AnaSantosId INT = SCOPE_IDENTITY();

INSERT INTO USUARIO_PAPEL (ID_USUARIO, ID_PAPEL)
VALUES (@AnaSantosId, (SELECT ID_PAPEL FROM PAPEL WHERE NOME_PAPEL = 'Tatuador'));

INSERT INTO TATUADOR (ID_USUARIO, DESCRICAO_TATUADOR, CNAE_FORMACAO_TATUADOR)
VALUES (@AnaSantosId, 'Especialista em tatuagens minimalistas e delicadas', '9602501');

-------------------------------------------------------------------------------
-- OUTRAS INSERÇÕES DE EXEMPLO
-------------------------------------------------------------------------------
-- Adicionar clientes, se desejado
-- ...

-- Exemplo de uso das variáveis nos Agendamentos (ajuste conforme necessidade)
-- INSERT INTO Agendamento (
--     ID_CLIENTE, ID_TATUADOR, DATA_HORA_INICIO, DATA_HORA_FIM,
--     ID_STATUS_AGENDAMENTO, TIPO_TATUAGEM, VALOR, OBSERVACOES
-- )
-- VALUES
-- (1, @AnaSantosId, '2025-07-01 10:00:00', '2025-07-01 12:00:00', 1, 'Tatuagem minimalista', 400.00, NULL),
-- (2, @MariaTatuadorId, '2025-07-02 10:00:00', '2025-07-02 12:00:00', 2, 'Realismo em preto e cinza', 600.00, 'Sessão detalhada');

-------------------------------------------------------------------------------
-- PROCEDURES DE LOGIN E GERENCIAMENTO DE USUÁRIOS
-------------------------------------------------------------------------------
GO
CREATE PROCEDURE STP_LOGIN_ADMIN
    @LOGIN VARCHAR(200),
    @SENHA VARCHAR(200)
AS
BEGIN
    IF EXISTS (
        SELECT 1
        FROM USUARIO U
        JOIN USUARIO_PAPEL UP ON UP.ID_USUARIO = U.ID_USUARIO
        JOIN PAPEL P ON P.ID_PAPEL = UP.ID_PAPEL
        WHERE U.LOGIN_USUARIO = @LOGIN AND U.SENHA_USUARIO = @SENHA
        AND P.NOME_PAPEL = 'ADMIN'
    )
    BEGIN
        SELECT TOP 1
            U.*, P.NOME_PAPEL
        FROM USUARIO U
        JOIN USUARIO_PAPEL UP ON UP.ID_USUARIO = U.ID_USUARIO
        JOIN PAPEL P ON P.ID_PAPEL = UP.ID_PAPEL
        WHERE U.LOGIN_USUARIO = @LOGIN AND U.SENHA_USUARIO = @SENHA
        AND P.NOME_PAPEL = 'ADMIN';

        UPDATE USUARIO
        SET ULTIMO_LOGIN = CAST(GETDATE() AS DATE)
        WHERE LOGIN_USUARIO = @LOGIN AND SENHA_USUARIO = @SENHA;
    END
END;
GO

CREATE PROCEDURE STP_LOGIN_TATUADOR
    @LOGIN VARCHAR(200),
    @SENHA VARCHAR(200)
AS
BEGIN
    IF EXISTS (
        SELECT 1
        FROM USUARIO U
        JOIN USUARIO_PAPEL UP ON UP.ID_USUARIO = U.ID_USUARIO
        JOIN PAPEL P ON P.ID_PAPEL = UP.ID_PAPEL
        WHERE U.LOGIN_USUARIO = @LOGIN AND U.SENHA_USUARIO = @SENHA
        AND P.NOME_PAPEL = 'TATUADOR'
    )
    BEGIN
        SELECT TOP 1
            U.*, P.NOME_PAPEL
        FROM USUARIO U
        JOIN USUARIO_PAPEL UP ON UP.ID_USUARIO = U.ID_USUARIO
        JOIN PAPEL P ON P.ID_PAPEL = UP.ID_PAPEL
        WHERE U.LOGIN_USUARIO = @LOGIN AND U.SENHA_USUARIO = @SENHA
        AND P.NOME_PAPEL = 'TATUADOR';

        UPDATE USUARIO
        SET ULTIMO_LOGIN = CAST(GETDATE() AS DATE)
        WHERE LOGIN_USUARIO = @LOGIN AND SENHA_USUARIO = @SENHA;
    END
END;
GO

CREATE PROCEDURE STP_DELETA_USUARIO
    @ID_USUARIO INT
AS
BEGIN
    DELETE FROM PAGAMENTO WHERE ID_TATUADOR = @ID_USUARIO;
    DELETE FROM Agendamento WHERE ID_TATUADOR = @ID_USUARIO;
    DELETE FROM ARTE_TATUADOR WHERE ID_TATUADOR = @ID_USUARIO;
    DELETE FROM TATUADOR WHERE ID_USUARIO = @ID_USUARIO;
    DELETE FROM USUARIO_PAPEL WHERE ID_USUARIO = @ID_USUARIO;
    DELETE FROM USUARIO WHERE ID_USUARIO = @ID_USUARIO;
END;
GO

CREATE PROCEDURE STP_ATUALIZA_USUARIO
    @ID_USUARIO INT,
    @NOME_USUARIO VARCHAR(200),
    @SOBRENOME_USUARIO VARCHAR(200),
    @DATA_NASC_USUARIO DATE,
    @CPF_USUARIO VARCHAR(14),
    @RG_USUARIO VARCHAR(15),
    @LOGIN_USUARIO VARCHAR(200),
    @SENHA_USUARIO VARCHAR(200),
    @STATUS_USUARIO VARCHAR(20),   -- Adicionado
    @ROLE_USUARIO VARCHAR(20)      -- Adicionado
AS
BEGIN
    UPDATE USUARIO
    SET
        NOME_USUARIO = @NOME_USUARIO,
        SOBRENOME_USUARIO = @SOBRENOME_USUARIO,
        DATA_NASC_USUARIO = @DATA_NASC_USUARIO,
        CPF_USUARIO = @CPF_USUARIO,
        RG_USUARIO = @RG_USUARIO,
        LOGIN_USUARIO = @LOGIN_USUARIO,
        SENHA_USUARIO = @SENHA_USUARIO,
        STATUS_USUARIO = @STATUS_USUARIO,
        ROLE_USUARIO = @ROLE_USUARIO
    WHERE ID_USUARIO = @ID_USUARIO;
END;
GO

CREATE PROCEDURE STP_CRIAR_USUARIO
    @NOME VARCHAR(200),
    @SOBRENOME VARCHAR(200),
    @CPF VARCHAR(14),
    @RG VARCHAR(15),
    @DATA_NASC DATE,
    @LOGIN VARCHAR(200),
    @SENHA VARCHAR(200)
AS
BEGIN
    IF EXISTS (SELECT 1 FROM USUARIO WHERE CPF_USUARIO = @CPF)
    BEGIN
        RAISERROR('CPF já cadastrado.', 16, 1);
        RETURN;
    END

    INSERT INTO USUARIO (
        NOME_USUARIO, SOBRENOME_USUARIO, DATA_NASC_USUARIO,
        CPF_USUARIO, RG_USUARIO, LOGIN_USUARIO, SENHA_USUARIO,
        STATUS_USUARIO, ULTIMO_LOGIN
    )
    VALUES (
        @NOME, @SOBRENOME, @DATA_NASC,
        @CPF, @RG, @LOGIN, @SENHA,
        'ATIVO', GETDATE()
    );

    SELECT * FROM USUARIO WHERE ID_USUARIO = SCOPE_IDENTITY();
END;
GO

-------------------------------------------------------------------------------
-- PROCEDURES DE ORDEM DE SERVIÇO
-------------------------------------------------------------------------------
CREATE PROCEDURE stp_inserir_ordem_servico
    @ID_CLIENTE INT,
    @ID_TATUADOR INT,
    @DESCRICAO_SERVICO VARCHAR(300),
    @VALOR DECIMAL(10,2),
    @STATUS_SERVICO VARCHAR(50)
AS
BEGIN
    INSERT INTO OrdemServico (
        ID_CLIENTE, ID_TATUADOR, DESCRICAO_SERVICO, VALOR, STATUS_SERVICO
    )
    VALUES (@ID_CLIENTE, @ID_TATUADOR, @DESCRICAO_SERVICO, @VALOR, @STATUS_SERVICO);

    SELECT * FROM OrdemServico WHERE ID_ORDEM_SERVICO = SCOPE_IDENTITY();
END;
GO

CREATE PROCEDURE stp_atualizar_ordem_servico
    @ID_ORDEM_SERVICO INT,
    @DESCRICAO_SERVICO VARCHAR(300),
    @VALOR DECIMAL(10,2),
    @STATUS_SERVICO VARCHAR(50)
AS
BEGIN
    UPDATE OrdemServico
    SET DESCRICAO_SERVICO = @DESCRICAO_SERVICO,
        VALOR = @VALOR,
        STATUS_SERVICO = @STATUS_SERVICO
    WHERE ID_ORDEM_SERVICO = @ID_ORDEM_SERVICO;
END;
GO

CREATE PROCEDURE stp_deletar_ordem_servico
    @ID_ORDEM_SERVICO INT
AS
BEGIN
    DELETE FROM OrdemServico WHERE ID_ORDEM_SERVICO = @ID_ORDEM_SERVICO;
END;
GO

CREATE PROCEDURE stp_listar_ordens_servico
    @STATUS_SERVICO VARCHAR(50) = 'Todas'
AS
BEGIN
    SELECT 
        OS.ID_ORDEM_SERVICO,
        OS.DESCRICAO_SERVICO,
        OS.VALOR,
        OS.STATUS_SERVICO,
        C.NOME_COMPLETO AS CLIENTE,
        CONCAT(U.NOME_USUARIO, ' ', U.SOBRENOME_USUARIO) AS TATUADOR,
        OS.DATA_CRIACAO
    FROM OrdemServico OS
    JOIN Cliente C ON C.ID_CLIENTE = OS.ID_CLIENTE
    JOIN TATUADOR T ON T.ID_USUARIO = OS.ID_TATUADOR
    JOIN USUARIO U ON U.ID_USUARIO = T.ID_USUARIO
    WHERE (@STATUS_SERVICO = 'Todas' OR OS.STATUS_SERVICO = @STATUS_SERVICO)
    ORDER BY OS.ID_ORDEM_SERVICO DESC;
END;
GO

-------------------------------------------------------------------------------
-- PROCEDURES DE TRANSAÇÕES FINANCEIRAS
-------------------------------------------------------------------------------
CREATE PROCEDURE stp_inserir_transacao_financeira
    @DATA_TRANSACAO DATE,
    @DESCRICAO VARCHAR(300),
    @VALOR DECIMAL(10,2),
    @TIPO_TRANSACAO VARCHAR(10),
    @ORIGEM_REFERENCIA VARCHAR(100)
AS
BEGIN
    INSERT INTO TransacaoFinanceira (
        DATA_TRANSACAO, DESCRICAO, VALOR, TIPO_TRANSACAO, ORIGEM_REFERENCIA
    )
    VALUES (
        @DATA_TRANSACAO, @DESCRICAO, @VALOR,
        @TIPO_TRANSACAO, @ORIGEM_REFERENCIA
    );

    SELECT * FROM TransacaoFinanceira WHERE ID_TRANSACAO = SCOPE_IDENTITY();
END;
GO

CREATE PROCEDURE stp_atualizar_transacao_financeira
    @ID_TRANSACAO INT,
    @DESCRICAO VARCHAR(300),
    @VALOR DECIMAL(10,2),
    @TIPO_TRANSACAO VARCHAR(10),
    @ORIGEM_REFERENCIA VARCHAR(100)
AS
BEGIN
    UPDATE TransacaoFinanceira
    SET DESCRICAO = @DESCRICAO,
        VALOR = @VALOR,
        TIPO_TRANSACAO = @TIPO_TRANSACAO,
        ORIGEM_REFERENCIA = @ORIGEM_REFERENCIA
    WHERE ID_TRANSACAO = @ID_TRANSACAO;
END;
GO

CREATE PROCEDURE stp_deletar_transacao_financeira
    @ID_TRANSACAO INT
AS
BEGIN
    DELETE FROM TransacaoFinanceira WHERE ID_TRANSACAO = @ID_TRANSACAO;
END;
GO

CREATE PROCEDURE stp_listar_transacoes_recentes
AS
BEGIN
    SELECT TOP 10
        ID_TRANSACAO,
        DATA_TRANSACAO,
        DESCRICAO,
        VALOR,
        TIPO_TRANSACAO,
        ORIGEM_REFERENCIA
    FROM TransacaoFinanceira
    ORDER BY DATA_TRANSACAO DESC, ID_TRANSACAO DESC;
END;
GO

CREATE PROCEDURE stp_resumo_financeiro
AS
BEGIN
    SELECT 
        SUM(CASE WHEN TIPO_TRANSACAO = 'Receita' THEN VALOR ELSE 0 END) AS ReceitaTotal,
        SUM(CASE WHEN TIPO_TRANSACAO = 'Despesa' THEN VALOR ELSE 0 END) AS Despesas,
        SUM(CASE WHEN TIPO_TRANSACAO = 'Receita' THEN VALOR ELSE 0 END) -
        SUM(CASE WHEN TIPO_TRANSACAO = 'Despesa' THEN VALOR ELSE 0 END) AS Lucro
    FROM TransacaoFinanceira;
END;
GO

-------------------------------------------------------------------------------
-- PROCEDURES DE CLIENTES
-------------------------------------------------------------------------------
CREATE OR ALTER PROCEDURE stp_inserir_cliente
    @NOME_COMPLETO VARCHAR(255),
    @EMAIL VARCHAR(255),
    @TELEFONE VARCHAR(20),
    @DATA_NASCIMENTO DATE,
    @OBSERVACOES NVARCHAR(MAX)
AS
BEGIN
    IF EXISTS (SELECT 1 FROM Cliente WHERE EMAIL = @EMAIL)
    BEGIN
        RAISERROR('E-mail já cadastrado para outro cliente.', 16, 1);
        RETURN;
    END

    INSERT INTO Cliente (
        NOME_COMPLETO, EMAIL, TELEFONE, DATA_NASCIMENTO, OBSERVACOES, DATA_ATUALIZACAO
    )
    VALUES (
        @NOME_COMPLETO, @EMAIL, @TELEFONE, @DATA_NASCIMENTO, @OBSERVACOES, GETDATE()
    );

    -- CORREÇÃO: Retornar o ID do cliente recém-criado
    SELECT CAST(SCOPE_IDENTITY() AS INT);
END;
GO